# Generated by Django 4.2.5 on 2023-09-20 10:20

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0092_delete_jobresult"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("ipam", "0066_iprange_mark_utilized"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=500,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9-_]+$",
                                "Only alphanumeric, hyphens, and underscores characters are allowed.",
                            )
                        ],
                    ),
                ),
                ("assigned_object_id", models.PositiveBigIntegerField()),
                ("type", models.CharField(max_length=30)),
                ("default_action", models.CharField(default="deny", max_length=30)),
                ("comments", models.TextField(blank=True)),
                (
                    "assigned_object_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "device")),
                                models.Q(("app_label", "dcim"), ("model", "virtualchassis")),
                                models.Q(("app_label", "virtualization"), ("model", "virtualmachine")),
                                _connector="OR",
                            )
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Access List",
                "verbose_name_plural": "Access Lists",
                "ordering": ["assigned_object_type", "assigned_object_id", "name"],
                "unique_together": {("assigned_object_type", "assigned_object_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="ACLStandardRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("index", models.PositiveIntegerField()),
                ("remark", models.CharField(blank=True, max_length=500)),
                ("description", models.CharField(blank=True, max_length=500)),
                ("action", models.CharField(max_length=30)),
                (
                    "access_list",
                    models.ForeignKey(
                        limit_choices_to={"type": "standard"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aclstandardrules",
                        to="netbox_plugin_extended_clusters.accesslist",
                    ),
                ),
                (
                    "source_prefix",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="ipam.prefix",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "ACL Standard Rule",
                "verbose_name_plural": "ACL Standard Rules",
                "ordering": ["access_list", "index"],
                "abstract": False,
                "unique_together": {("access_list", "index")},
            },
        ),
        migrations.CreateModel(
            name="ACLInterfaceAssignment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("direction", models.CharField(max_length=30)),
                ("assigned_object_id", models.PositiveBigIntegerField()),
                ("comments", models.TextField(blank=True)),
                (
                    "access_list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="netbox_plugin_extended_clusters.accesslist"
                    ),
                ),
                (
                    "assigned_object_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "interface")),
                                models.Q(("app_label", "virtualization"), ("model", "vminterface")),
                                _connector="OR",
                            )
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "ACL Interface Assignment",
                "verbose_name_plural": "ACL Interface Assignments",
                "ordering": ["assigned_object_type", "assigned_object_id", "access_list", "direction"],
                "unique_together": {("assigned_object_type", "assigned_object_id", "access_list", "direction")},
            },
        ),
        migrations.CreateModel(
            name="ACLExtendedRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("index", models.PositiveIntegerField()),
                ("remark", models.CharField(blank=True, max_length=500)),
                ("description", models.CharField(blank=True, max_length=500)),
                ("action", models.CharField(max_length=30)),
                (
                    "source_ports",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "destination_ports",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(), blank=True, null=True, size=None
                    ),
                ),
                ("protocol", models.CharField(blank=True, max_length=30)),
                (
                    "access_list",
                    models.ForeignKey(
                        limit_choices_to={"type": "extended"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aclextendedrules",
                        to="netbox_plugin_extended_clusters.accesslist",
                    ),
                ),
                (
                    "destination_prefix",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="ipam.prefix",
                    ),
                ),
                (
                    "source_prefix",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="ipam.prefix",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "ACL Extended Rule",
                "verbose_name_plural": "ACL Extended Rules",
                "ordering": ["access_list", "index"],
                "abstract": False,
                "unique_together": {("access_list", "index")},
            },
        ),
    ]
